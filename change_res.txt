1)
    a) Not sure I understand what you are saying here. I removed the sku and name field from the filter list because there isn't a good way to enter in the filter value without seeing a huge number of entries since they are expected to be unique. If a sku or name is known it should be searched for in the results pane.
    
    b) Moved the Reset Filter button to the footer in the Filter pane.

    c) Citrus behavior is as intended. If the value is undefined for an entity, it will not show up if you filter for YES/NO or both. If you don't enter a filter value (ie don't press yes or no) it will show up.

    d) The price slider isn't working because there is only one price value. It adapts the range to the range of the entries so it isn't useful if the range is ill defined. Once there is more underlying data, it should work fine.

    e) I believe that is how it behaves. It is loading the values from the database whenever it opens.

2) 
    a) sure.
    
    b) since its an admin pane, I didn't want to restrict the user from entering two products with the same name in case two manufactures have the same product name etc. If you think this will cause issues, I an impose the restriction, however I think the system will be more flexible if the limitation is not imposed. The rest of the system should be robust to having redundant entries, and if you don't want redundant entries you can always delete the redundant one.

3)

    a) Transactions are implemented a little differently than device queries so there really isn't a need to click on any search button. As soon as a filter value is entered, the results should filter themselves. 

    b) Not sure what you mean here. Do you mean replace the text boxes with drop down selection menus like for the device query? Or do you mean add some other filter items?

    c) The user filter is in the upper right hand corner of the screen. I can move it over to the filters pane if that makes more sense to you. You can change the value as it is and see if the behavior is what you are looking for.

--------------------------------------------------------------------------------

Instalation Instructions:

I will publish my repository so that it is public. You can then download and install the code with the following commands:

--------------------------------------------------------------------------------
git clone git@github.com:namiller/device_query.git some_name
cd some_name
npm install
node index.js
--------------------------------------------------------------------------------

you can then navigate in your browser to http://localhost:8000/app/ and interact with the app.

To change the configuration details (ie device properties etc) you will want to edit config.json (README.md has details on how to do this). You will then probably want to delete store.db and call node index.js to recreate the database. You should then restart it so that it has the full database. This would look something like:

--------------------------------------------------------------------------------
vim config.json [edit the file]
rm store.db
node index.js
cntrl-c
node index.js
--------------------------------------------------------------------------------

If you have already started entering data into the database and you don't want to lose it, you should not delete store.db and it will attempt to migrate the entries if at all possible. That would just look like:

--------------------------------------------------------------------------------
vim config.json [edit the file]
node index.js
cntrl-c
node index.js
--------------------------------------------------------------------------------

That is about all there is too it. There are a few different ways to set up the system to run on a centralized server, but they are mostly platform specific so the easiest thing to do is probably google for "How to run nodeJS on ***" where *** is whatever server system you are using. For the demo server I set up I'm using apache and passenger and it is pretty straightforward.

